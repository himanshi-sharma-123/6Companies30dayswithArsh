//APPROACH

Applying binary search in 1 to 1e10

calculate mid
check the numbers which are not divisible by d1 upto mid.
check the numbers which are not divisible by d2 upto mid.
check the numbers which are not divisible by d1 and d2 as well.
check 3 condition if satisfy then it can be our possible answer and start searching in left half to get minimum possible answer.
if not then search in right half.

// CODE//

class Solution {
    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    public int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        long start=1;
        long end = (int)1e10;
        long lcm = ((long)divisor1*(long)divisor2)/gcd(divisor1,divisor2);
        long ans = end;
        while (start <= end) {
            long mid = start + (end - start) / 2;
            int a = (int) (mid - mid / divisor1);
            int b = (int) (mid - mid / divisor2);
            int c = (int) (mid - ((mid / divisor1) + (mid / divisor2) - (mid / lcm)));

            if (a >= uniqueCnt1 && b >= uniqueCnt2 && (a + b - c) >= (uniqueCnt1 + uniqueCnt2)) {
                ans = mid;
                end = mid-1;
            } else {
                start = mid+1;
            }
        }
        return (int)ans;
    }

}

